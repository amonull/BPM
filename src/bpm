#!/bin/sh

[ "$(id -u)" -eq 0 ] && (echo "BPM must be run as non-root"; exit 1)

_version="v0.1_alpha"

packages_path="$HOME/.local/BPM/pkgs/"
repos_path="$HOME/.local/share/BPM/repos/"

init () {
  if [ ! "$repos_path" ]; then
    git clone https://github.com/amonull/BPM
    mkdir -p "$repos_path"
    mv ./BPM/repo/main-repo.db "$repos_path"
    rm -rf ./BPM
  fi

  if [ ! "$packages_path" ]; then
    mkdir -p "$packages_path"
  fi

  is_on_path=0

  case :$PATH: in
    *:"$packages_path":*)
      is_on_path=1
      ;;
  esac

  if [ ! $is_on_path ]; then
    echo "$packages_path is not on path."
  fi
}

#############################################
############ PKG INFO SOURCING ##############
#############################################

template_source() {
  # finding file
  PKG_PATH=$(find "$repos_path" -iname "$**" 2> /dev/null)
  AMOUNT_FOUND=$(find "$repos_path" -iname "$**" 2> /dev/null | wc -l) # calling $FILE_PATH in this command or when checking if this command is above 1 PREMISSION ERROR is given
  TEMPLATE_PATH="$PKG_PATH/Template"
  
  # if more than 1 file returned give error
  [ "$AMOUNT_FOUND" -gt 1 ] && (printf "found packages\n\n%s\n\nbe more specific" "$FILE_PATH"; exit 1)
  
  # sourcing file
  if [ ! -d "$PKG_PATH" ]; then
    echo "package not found"
    exit 1
  fi

  pkg_name=$(grep "Name" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || (echo "Name parameter not found"; exit 1))
  pkg_version=$(grep "Version" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || (echo "Version parameter not found"; exit 1))
  pkg_revision=$(grep "Revision" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || (echo "Revision parameter not found"; exit 1))
  pkg_BPM_deps=$(grep "BPM_deps" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ") # BPM_deps optional
  pkg_host_deps=$(grep "Host_deps" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ") # Host_deps optional
  pkg_URL=$(grep "URL" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || (echo "URL not found"; exit 1))
  pkg_bin_name=$(grep "Bin_name" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || (echo "Bin_name not found"; exit 1))
  pkg_manpages=$(grep "Manpages" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ")
  pkg_libs=$(grep "Libs" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ")
  pkg_completion=$(grep "Completion" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ")
  pkg_uninstall_paths=$(grep "Uninstall_paths" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ")
  pkg_desktop=$(grep "Desktop" "$TEMPLATE_PATH" | awk 'BEGIN { FS = "=" } ;  { print $2 }' | tr -d '"' || " ")
  pkg_build="$FILE_PATH/build.sh"
  pkg_patches="$FILE_PATH/patches/"

  if echo "$pkg_manpages" | grep -x "Manpages=\"{TEMPLATE}.*\"" > /dev/null 2>&1; then
    pkg_manpages=$(echo "$pkg_manpages" | sed "s|{TEMPLATE}|$FILE_PATH|g" > /dev/null 2>&1)
  fi

  if echo "$pkg_completion" | grep -x "Completion=\"{TEMPLATE}.*\"" > /dev/null 2>&1; then
    pkg_completion=$(echo "$pkg_completion" | sed "s|{TEMPLATE}|$FILE_PATH|g" > /dev/null 2>&1)
  fi

  if echo "$pkg_desktop" | grep -x "Desktop=\"{TEMPLATE}.*\"" > /dev/null 2>&1; then
    pkg_desktop=$(echo "$pkg_desktop" | sed "s|{TEMPLATE}|$FILE_PATH|g" > /dev/null 2>&1)
  fi
}

DB_source () {
  echo HERE
}

#############################################
############# PKG DOWNLOAD ##################
#############################################

template_source "package-name"

echo "$pkg_name"
