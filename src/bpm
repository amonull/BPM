#!/bin/sh

# [ colors ]
normal="\033[0;97m"
red="\033[0;91m"
yellow="\033[0;93m"
green="\033[0;92m"
blue="\033[0;94m"

[ "$(id -u)" -eq 0 ] && (printf '%b' "${red}[ERR]: bpm must be run as regular user (non-root)${normal}"; exit 1)

readonly _version="1.0"

packages_path="$HOME/.local/share/BPM/pkgs/" # in download_stage_3 pkg_name gets placed here (flag -p changes this location)
repos_path="$HOME/.local/share/BPM/repos/" # templates stored here (flag -r changes this location)

manpages_path="$HOME/.local/share/man/"
bash_comp_path="$HOME/.local/share/bash-completion/completions/"
fish_comp_path="$HOME/.local/share/fish/generated_completions/"
zsh_comp_path="$HOME/.local/share/zsh/vendor-completions/"
desktop_path="$HOME/.local/share/applications/"
symlink_bin_path="$HOME/.local/bin/"

tmp_dir="$(mktemp -d -t BPM.XXXXXXXXXX)/"

#############################################
################## GENERAL ##################
#############################################

usage () {
  printf "  usage: bpm [option(s)] [package]

  Options:
    -d, --download
      Download a package
    -s, --search
      Search for a package in bpm repos (default /home/<user>/.local/share/BPM/repos/)
    -R, --remove
      Remove a package completely
    -U, --update-pkg
      Update a specific package
    -u, --update
      Update all packages
    -c, --check-updates
      Checks for updates
    -S, --self-update
      Have bpm update itself
    -F, --redownload
      Redownloads a package after uninstalling it
    -I, --ignore-deps
      Doesn't check or install dependecies. It is recommended to not use this unless you know it is required
    -r, --repo
      changes default repo (/home/<user>/.local/share/BPM/repos/) to user specified
    -p, --path
      changes where the binary is symlinked to (default /home/<user>/.local/bin/)
    -l, --list-installed
      lists all installed packages with their version
    -L, --list-avaliable
      lists all avaliable packages with their version
    -V, --verbose
      print more information
    -v, --version
      print version
    -h, --help
      print this screen\n"
}

cleanup () {
  rm -rf "$tmp_dir"
  exit 1
}

cleanup_success () {
  rm -rf "$tmp_dir"
  exit 0
}

flush_vars () {
  # core package variables
  pkg_name=""
  pkg_version=""
  pkg_revision=""
  pkg_URL="" 

  # dependecies
  pkg_bpm_deps=""
  pkg_host_deps=""

  # non-vital pack
  pkg_conflicts=""
  pkg_checksum=""
  pkg_premissions=""
  pkg_bin_premissions=""
  pkg_file_premissions=""

  # package file variables
  pkg_manpages=""
  pkg_completion=""
  pkg_desktop=""
  pkg_files=""
  pkg_patches=""
  pkg_build=""
}

print_err () {
  printf '%b' "${red}$*${normal}\n"
}

print_warning () {
  printf '%b' "${yellow}$*${normal}\n"
}

print_info () {
  printf '%b' "${blue}$*${normal}\n"
}

print_success () {
  printf '%b' "${green}$*${normal}\n"
}


#############################################
################ PREPERATION ################
#############################################

find_pkg () {
  AMOUNT_FOUND="$(find "$repos_path" -iname "$*" 2> /dev/null | wc -l)"

  if [ "$AMOUNT_FOUND" -gt "1" ]; then
    print_warning "[WARNING]: found more than 1 package"
    print_warning "the packages found are:\n"
    find "$repos_path" -iname "$*" -exec echo {} \;
    print_warning "\nbe more specific"
    cleanup
  fi

  path_to_package="$(find "$repos_path" -iname "$*" 2> /dev/null)"
  path_to_package_template="$path_to_package/Template"

  # fixing issue that occur with symlinks
  if [ -L "$path_to_package" ]; then
    path_to_package="$(readlink "$path_to_package")"
  fi
  if [ -L "$path_to_package_template" ]; then
    path_to_package_template="$(readlink "$path_to_package_template")"
  fi
}

source_template () {
  # sources a package variables
  
  flush_vars
  
  if [ ! -f "$path_to_package_template" ]; then
    if [ -n "${list_avliable+x}" ]; then
      pkg_version="NO"
      pkg_revision="TEMPLATE"
      return
    fi
    print_err "[ERR]: package not found"
    cleanup
  fi

  # core package variables
  pkg_name="$(grep "Name" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2 || (print_err "[ERR]: Name parameter not found"; cleanup))"
  pkg_version="$(grep "Version" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2 || (print_err "[ERR]: Version parameter not found"; cleanup))"
  pkg_revision="$(grep "Revision" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2 || (print_err "[ERR]: Revision parameter not found"; cleanup))"
  pkg_URL="$(grep "URL" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2 || (print_err "[ERR]: URL not found"; cleanup))"

  # dependecies
  pkg_bpm_deps="$(grep "BPM_deps" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"
  pkg_host_deps="$(grep "Host_deps" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"

  # non-vital package variables
  pkg_conflicts="$(grep "Conflicts" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"
  pkg_checksum=$(grep "Checksum" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)
  pkg_premissions=$(grep "Premissions" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)
  pkg_bin_premissions="644" # rw.r..r.. premissions by default
  pkg_file_premissions=""

  # package file variables
  pkg_manpages="$(grep "Manpages" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"
  pkg_completion="$(grep "Completion" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"
  pkg_desktop="$(grep "Desktop" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)"
  pkg_files=$(grep "Files" "$path_to_package_template" | awk -F '=' '{ print $2 }' | tail -c +2 | head -c -2)
  pkg_patches="$path_to_package/patches/"
  pkg_build="$path_to_package/build.sh"

  # in second script | is used instead of / since using / used to give errors but in first | gives errors
  if [ -n "$pkg_manpages" ]; then
    pkg_manpages="$(echo "$pkg_manpages" | sed '/{TEMPLATE}/ !s|^|'"$tmp_dir|g")" # i hate regex
    pkg_manpages="$(echo "$pkg_manpages" | sed "s|{TEMPLATE}|$path_to_package|g")"
  fi

  if [ -n "$pkg_completion" ]; then
    pkg_completion="$(echo "$pkg_completion" | sed '/{TEMPLATE}/ !s|^|'"$tmp_dir|g")"
    pkg_completion="$(echo "$pkg_completion" | sed "s|{TEMPLATE}|$path_to_package|g")"
  fi

  if [ -n "$pkg_desktop" ]; then
    pkg_desktop="$(echo "$pkg_desktop" | sed '/{TEMPLATE}/ !s|^|'"$tmp_dir|g")"
    pkg_desktop="$(echo "$pkg_desktop" | sed "s|{TEMPLATE}|$path_to_package|g")"
  fi

  if echo "$pkg_version" | grep -qx "{AUTO->.*}"; then
    command="$(echo "$pkg_version" | awk -F '->' '{print $2}' | head -c -2)"
    pkg_version="$(eval "$command")"
    pkg_version="$(echo "$pkg_version" | tr -d ' ')"
  fi

  if [ -n "$pkg_URL" ]; then
    pkg_URL="$(echo "$pkg_URL" | sed "s|{VERSION}|$pkg_version|g")"
  fi

  if [ -n "$pkg_name" ]; then
    pkg_name="$(echo "$pkg_name" | sed "s|{VERSION}|$pkg_version|g")"
  fi

  if [ -L "$pkg_build" ]; then
    pkg_build="$(readlink "$pkg_build")"
  fi

  for premission in $pkg_premissions; do
    if echo "$premission" | grep -qx "\{BIN\}>[0-7][0-7][0-7]" > /dev/null 2>&1; then # > /dev/null is needed to avoid stray \ in grep but that stray \ avoids errors
      pkg_bin_premissions="$(echo "$premission" | awk -F '>' '{print $2}')"
    else
      pkg_file_premissions="$pkg_file_premissions $premission"
    fi
  done
}

prepare_system () {
  # checks for dependecies and conflicts
  found_conflicts=""
  not_installed_host_deps=""
  not_installed_host_alternative_deps=""
  not_installed_bpm_deps=""

  for conflict in $pkg_conflicts; do
    if [ -n "$(whereis -bs "$conflict" | awk -F ':' '{print $NF}')" ]; then
      found_conflicts="$found_conflicts $conflict"
    fi
  done

  if [ "$found_conflicts" ]; then
    print_err "[ERR]: following conflicts were found on system:\n"
    for conflict in $found_conflicts; do 
      echo "$conflict"
    done
    print_err "\nexiting..."
    cleanup
  fi

  if [ ! "$ignore_deps" ]; then
    for host_dep in $pkg_host_deps; do
      if echo "$host_dep" | grep -qx "{.*}"; then
        host_dep="$(echo "$host_dep" | tr -d '{}' | tr ',' ' ')"
        for alt_host_deps in $host_dep; do
          # XXX: currently checking this way is incorrect. fix this
          # i.e. run loop if one is installed stop as this dep being fulfilled
          if [ -z "$(whereis -bs "$alt_host_deps" | awk -F ':' '{print $NF}')" ]; then
            not_installed_host_alternative_deps="$not_installed_host_alternative_deps $host_dep"
          fi
        done
      else
        if [ -z "$(whereis -bs "$host_dep" | awk -F ':' '{print $NF}')" ]; then
            not_installed_host_deps="$not_installed_host_deps $host_dep"
        fi
      fi
    done

    for bpm_dep in $pkg_bpm_deps; do
      if [ -z "$(whereis -bs "$bpm_dep" | awk -F ':' '{print $NF}')" ]; then
        not_installed_bpm_deps="$not_installed_bpm_deps $bpm_dep"
      fi
    done

    if [ -n "$not_installed_host_deps" ]; then
      print_err "[ERR]: following dependecies needs to be installed with host package manager:\n"
      for dep in $not_installed_host_deps; do
        echo "  $dep"
      done
      print_err "\nexiting..."
      cleanup
    fi

    if [ -n "$not_installed_host_alternative_deps" ]; then
      print_err "[ERR]: atleast one of following dependecies needs to be installed on the system using the host package manager:\n"
      for dep in $not_installed_host_alternative_deps; do
        echo "  $dep"
      done
      print_err "exiting..."
      cleanup
    fi

    if [ -n "$not_installed_bpm_deps" ]; then
      print_info "[INFO]: found required BPM dependecies:\n"
      for dep in $not_installed_bpm_deps; do
        echo "  $dep"
      done
      printf "install those dependecies? [y/N]: "
      read -r response
      case "$response" in
        [yY])
          for install_dep in $not_installed_bpm_deps; do
            bpm -d "$install_dep" # assumes bpm is in path (self call)
          done
          ;;
        *)
          print_err "[ERR]: dependecies are still required. Cannot install $pkg_name."
          print_err "exiting..."
          cleanup
          ;;
      esac
    fi
  fi
}


#############################################
################ DOWNLOADING ################
#############################################

download_stage_1 () {
  # gets all files from pkg_URL and puts into /tmp/BPM.XXXXXX/

  for url in $pkg_URL; do
    if echo "$url" | grep -q '\.git$' ; then
      git clone "$url" "$tmp_dir" || (print_err "[ERR]: couldn't clone git repo: $url into $tmp_dir"; cleanup)
    else
      if echo "$url" | grep -q '\.tar\.gz$'; then
        # -L is needed to download files as with their contents
        # XXX: add multiple options to unarchive different file types
        curl -L "$url" | tar xz -C "$tmp_dir" || (print_err "[ERR]: couldn't curl and unpack url: $url")
      else
        curl -L "$url" -o "$tmp_dir$(echo "$url" | awk -F '/' '{ print $NF }')" || (print_err "[ERR]: couldn't curl $url into $tmp_dir"; cleanup)
      fi
    fi
  done
}

download_stage_2 () {
  # applies patches to files in /tmp/BPM.XXXXXX/
  # builds pkgs in /tmp/BPM.XXXXXX/
  
  # [ PATCHING ]
  # TODO: needs fix on patches paths due to using git to install as well
  # consider using sub-shells to cd and using < to redirect patches
  if [ -d "$pkg_patches" ]; then
    for path in "$pkg_patches"*; do
      if [ ! -f "$path" ]; then
        print_warning "[WARNING]: patch: $path is not a file.\nskipping..."
        continue
      fi

      file_to_patch="$(echo "$path" | awk -F '.' '{ print $1 }' )"

      patch -u "$file_to_patch" --input="$path" > /dev/null 2>&1 || (print_err "[ERR]: couldn't apply patch: $path to $file_to_patch.\nexiting..."; cleanup)
    done
  fi

  # [ BUILDING ]
  if [ -f "$pkg_build" ]; then
    print_info "\n<--- [INFO]: BUILD SCRIPT START --->"
    cat "$pkg_build"
    print_info "<--- [INFO]: BUILD SCRIPT END --->\n"

    printf "Run build script above? [y/N]: "
    read -r  response
    case "$response" in
      [yY])
        if sh "$pkg_build"; then
          print_success "running $pkg_build inside $tmp_dir"
        else
          print_err "cannot run $pkg_build inside $tmp_dir"
        fi
        # sh "$pkg_build" && print_success "running $pkg_build inside $tmp_dir" || print_err "cannot run $pkg_build inside $tmp_dir"
        ;;
      *)
        printf "Not running build script. Exit [Y/n]: "
        read -r response
        case "$response" in
          [nN])
            print_info "[INFO]: $pkg_build didn't run.\nskipping checksums to avoid errors..."
            return
            ;;
          *)
            print_info "exiting..."
            cleanup
            ;;
        esac
        ;;
    esac
  fi

  # [ CHECKSUM ]
  for checksum in $pkg_checksum; do
    file_name="$(echo "$checksum" | awk -F '>' '{ print $2 }')"
    checksum_method="$(echo "$checksum" | awk -F '>' '{ print $1 }' | tr -d '{')"
    expected_checksum_result="$(echo "$checksum" | awk -F '>' '{ print $2 }')"
    actual_checksum_result=$($checksum_method "$file_name" || (print_err "[ERR]: error in making checksum file: $file_name"; cleanup))

    if [ ! "$expected_checksum_result" = "$actual_checksum_result" ]; then
      print_err "[ERR]: checksums in file: $file_name do not match"
      print_err "expected: $expected_checksum_result"
      print_err "actual: $actual_checksum_result"
      print_err "exiting..."

      cleanup
    fi
  done
}

download_stage_3 () {
  outdir="${packages_path}$(basename "$path_to_package")"
  man_outdir="$outdir/man"
  completions_outdir="$outdir/completions"
  desktop_outdir="$outdir/dekstop"
  files_outdir="$outdir/files"
  bin_outdir="$outdir/bin"
  version_file_outdir="$outdir/VERSION"
  info_file_outdir="$outdir/$(basename "$path_to_package")_files_info" # simple txt file holding relative paths and where they are linked to i.e: man/man1/man.1  home/<user>/.local/share/man/man1/man.1
  mkdir -p "$outdir" "$man_outdir" "$completions_outdir" "$desktop_outdir" "$files_outdir" "$bin_outdir"
  touch "$info_file_outdir"

  # [ VERSION ]
  echo "${pkg_version}_${pkg_revision}" > "$version_file_outdir"

  # [ MANPAGES ]
  for manpage in $pkg_manpages; do
    ends_with=$(basename "$manpage" | awk -F '.' '{ print $2 }')
    end_path="$man_outdir/man$ends_with/"
    ln_path="${manpages_path}man$ends_with/"

    mkdir -p "$end_path" "$ln_path"

    # XXX: consider if error checking install should be used like in below
    install -Dm644 "$manpage" "$end_path"

    manpage="$(echo "$manpage" | awk -F '/' '{print $NF}')" # done incase $manpage used full path for template

    ln -s "${end_path}$manpage" "$ln_path"

    echo "${end_path}$manpage ${ln_path}$manpage" >> "$info_file_outdir"
  done

  # [ COMPLETION ]
  for completion in $pkg_completion; do
    completion_end_path="$completions_outdir/$(basename "$completion")"
    case $completion in
      *.fish)
        # XXX: consider if error checking install should be used like in below
        install -Dm644 "$completion" "$completion_end_path"
        ln -s "$completion_end_path" "$fish_comp_path"
        echo "$completion_end_path $fish_comp_path$(basename "$completion_end_path")" >> "$info_file_outdir"
        ;;
      *.bash)
        install -Dm644 "$completion" "$completion_end_path"
        ln -s "$completion_end_path" "$bash_comp_path"
        echo "$completion_end_path $bash_comp_path$(basename "$completion_end_path")" >> "$info_file_outdir"
        ;;
      *.zsh)
        install -Dm644 "$completion" "$completion_end_path"
        ln -s "$completion_end_path" "$zsh_comp_path"
        echo "$completion_end_path $zsh_comp_path$(basename "$completion_end_path")" >> "$info_file_outdir"
        ;;
      *)
        ;;
    esac
  done

  # [ DESKTOP ]
  desktop_end_path="$desktop_outdir/$(basename "$pkg_desktop")"
  if install -Dm644 "$pkg_desktop" "$desktop_end_path" 2> /dev/null; then
    ln -s "$desktop_end_path" "$desktop_path"
    echo "$desktop_end_path $desktop_path$(basename "$desktop_end_path")" >> "$info_file_outdir"
  fi

  # [ BIN ]
  if [ "$pkg_name" = "{NONE}" ]; then
    pkg_name="$(basename "$path_to_package")"

    { echo "$pkg_name" ; echo "${pkg_version}_${pkg_revision}" ; echo "" ; echo "This package has no official binary. Check $info_file_outdir for more information on what was installed where." ; } > "$bin_outdir/$pkg_name"

    # XXX: alternative to above commented below incase above doesn't work

    # echo "$pkg_name" >> "$bin_outdir/$pkg_name"
    # echo "${pkg_version}_${pkg_revision}" >> "$bin_outdir/$pkg_name"
    # echo "" >> "$bin_outdir/$pkg_name"
    # echo "This package has no official binary. Check $info_file_outdir for more information on what was installed where." >> "$bin_outdir/$pkg_name"
  else
    true_name="$(echo "$pkg_name" | awk -F '{' '{print $1}' | tr -d '}')"
    if install -Dm"$pkg_bin_premissions" "$tmp_dir$true_name" "$bin_outdir/$true_name"; then
      ln -s "$bin_outdir/$true_name" "$symlink_bin_path"
      echo "$bin_outdir/$true_name $symlink_bin_path$true_name" >> "$info_file_outdir"
      # [ second name check ]
      if echo "$pkg_name" | grep -q '{.*}'; then
        alt_name="$(echo "$pkg_name" | awk -F '{' '{print $2}' | tr -d '}')"
        ln -s "$bin_outdir/$true_name" "$symlink_bin_path$alt_name"
        echo "$bin_outdir/$true_name $symlink_bin_path$alt_name" >> "$info_file_outdir"
      fi
    else
      print_err "[ERR]: parameter Name is not {NONE} and $pkg_name does not exists in $tmp_dir"
      cleanup
    fi
  fi

  # [ FILES ]
  dirs_to_append_file=""
  for file in $pkg_files; do
    
    if [ "$(echo "$file" | awk -F '>' '{ print $1 }' )" = "{BIN}" ]; then
      file_loc="$pkg_name"
    else
      file_loc="$(echo "$file" | awk -F '>' '{ print $1 }' )"
    fi
    new_loc="$(echo "$file" | awk -F '>' '{ print $2 }' | sed "s|{HOME}|$HOME|g" )"
    local_loc="$files_outdir/$(basename "$new_loc")"
    file_name="$(basename "$file_loc")"

    file_premission="$(echo "$pkg_file_premissions" | grep -o "$file_name>[0-7][0-7][0-7]" || echo "644")"

    printf "move file: $tmp_dir$file_loc into $new_loc? [y/N]: "
    read -r response
    case "$response" in
      [yY])
        if install -Dm"$file_premission" "$tmp_dir$file_loc" "$local_loc"; then
          dirs_created="$(mkdir -vp "$(dirname "$new_loc")")"
          dirs_created_pretty="$(echo "$dirs_created" | awk -F "'" '{print $2}')"

          dirs_to_append_file="$dirs_to_append_file$dirs_created_pretty\n"

          ln -s "$local_loc" "$new_loc"
          echo "$local_loc $new_loc" >> "$info_file_outdir"
        else
          print_warning "[WARNING]: File in: $file_loc does not exists"
          print_warning "skipping $file_loc..."
        fi
        ;;
      *)
        print_info "skipping..."
        ;;
    esac
  done
  printf "$dirs_to_append_file" >> "$info_file_outdir"

  # [ END ]
  if [ -n "$dirs_to_append_file" ]; then
    sed -i '$ d' "$info_file_outdir" # removing leftover newline
  fi
  # rm -rf "$tmp_dir" # might be useless with cleanup and cleanup_success functions
}


#############################################
################# REMOVING ##################
#############################################

remove_pkg () {
  outdir="${packages_path}$(basename "$path_to_package")"
  info_file_outdir="$outdir/$(basename "$path_to_package")_files_info" # simple txt file holding relative paths and where they are linked to i.e: man/man1/man.1  home/<user>/.local/share/man/man1/man.1

  # [ removing deps ]
  if [ "$pkg_bpm_deps" ]; then
    print_info "[INFO]: Found installed BPM deps: "
    for bpm_dep in $pkg_bpm_deps; do
      printf "Remove $bpm_dep? [y/N]: "
      read -r respone
      case "$respone" in
        [yY])
          bpm -R "$bpm_dep"
          ;;
        *)
          print_info "[INFO]: not removing $bpm_dep"
          ;;
      esac
    done
  fi

  if [ "$pkg_host_deps" ]; then
    print_info "[INFO]: Found installed host deps: "
    for host_dep in $pkg_host_deps; do
      echo "  $host_dep"
    done
  fi
  
  # [ removing symlinks and installed files ]
  while read -r path; do
    dir_path="$(echo "$path" | awk '{print $1}')"
    symlink_path="$(echo "$path" | awk '{print $2}')"

    if [ "$symlink_path" ]; then
      if ! unlink "$symlink_path"; then
        print_err "[ERR]: couldn't unlink path: $symlink_path"
      fi
    elif [ "$dir_path" ]; then
      if ! rm -rf "$dir_path"; then
        print_err "[ERR]: couldn't remove dir: $dir_path"
      fi
    else
      print_err "[ERR]: neither symlink_path or dir_path is set"
    fi
  done < "$info_file_outdir"

  rm -rf "$outdir"
}


#############################################
################# UPDATING ##################
#############################################

update_checker () {
  needs_update=""

  for package in "$packages_path"/*; do
    current_package="$(basename "$package")"

    current_version="$(cat "$package/VERSION")"

    find_pkg "$current_package"
    source_template
    
    if [ ! "$current_version" = "${pkg_version}_${pkg_revision}" ]; then
      needs_update="$needs_update $current_package"
    fi
  done

  if [ -n "$needs_update" ]; then
    print_info "[INFO]: Following packages need to be updated"
    for package in $needs_update; do
      echo "  $package"
    done
  fi
}

update_pkg () {
  current_package="$packages_path$flag_pkgs"

  current_version="$(cat "$current_package/VERSION")"

  find_pkg "$flag_pkgs"
  source_template

  if [ "$current_version" = "${pkg_version}_${pkg_revision}" ]; then
    print_info "[INFO]: $flag_pkgs already on newest version on template"
    cleanup_success
  fi

  bpm -R "$flag_pkgs" # remove package
  bpm -d "$flag_pkgs" # reinstall package (cannot update bpm)
}

full_update () {
  needs_update=""

  for package in "$packages_path"*; do
    current_package="$(basename "$package")"

    if [ "$current_package" = "*" ]; then
      print_info "[INFO]: no installed packages found on path: $packages_path"
      cleanup
    fi

    current_version="$(cat "$package/VERSION")"

    find_pkg "$current_package"
    source_template
    
    if [ ! "$current_version" = "${pkg_version}_${pkg_revision}" ]; then
      needs_update="$needs_update $current_package"
    fi
  done

  for package in $needs_update; do
    if [ "$package" = "bpm" ]; then
      bpm -S
    else
      bpm -U "$package"
    fi
  done
}

self_update () {
  bpm -R bpm

  git clone https://github.com/amonull/BPM.git "$tmp_dir"

  ./install.sh
}

#############################################
################ START POINT ################
#############################################

# XXX: Location Change here
cd "$tmp_dir" || (print_err "[ERR]: cannot cd into created tmp dir: $tmp_dir"; cleanup)

[ $# -lt 1 ] && (print_err "not enough parameters supplied\n"; usage) && cleanup

while [ $# -gt 0 ]; do
  case "$1" in
    -d|--download)
      download=1
      ;;
    -s|--search)
      search=1
      ;;
    -R|--remove)
      remove=1
      ;;
    -U|--update-pkg)
      if [ $# -lt 2 ]; then
        print_err "[ERR]: not enough arguments for flag: -U"
        cleanup
      fi
      update_pkg=1
      flag_pkgs="$2"
      shift
      ;;
    -u|--update)
      update=1
      ;;
    -c|--check-updates)
      check_updates=1
      ;;
    -S|--self-update)
      update_self=1
      ;;
    -F|--redownload)
      redownload=1
      ;;
    -I|--ignore-deps)
      ignore_deps=1
      ;;
    -r|--repo)
      if [ $# -lt 2 ]; then
        print_err "[ERR]: not enough arguments for flag: -r"
        cleanup
      fi
      repos_path="$2"
      shift
      ;;
    -p|--path)
      if [ $# -lt 2 ]; then
        print_err "[ERR]: not enough arguments for flag: -p"
        cleanup
      fi
      packages_path="$2"
      shift
      ;;
    -l|--list-installed)
      list_installed=1
      ;;
    -L|--list-avaliable)
      list_avliable=1
      ;;
    -V|--verbose)
      verbose=1
      ;;
    -v|--version)
      echo "$_version"
      cleanup_success
      ;;
    -h|-\?|--help)
      usage
      cleanup_success
      ;;
    *)
      if [ -z "${update_pkg+x}" ]; then
        flag_pkgs="$1 $flag_pkgs"
      fi
      ;;
  esac
  shift
done
flag_pkgs="$(echo "$flag_pkgs" | head -c -2)" # getting rid of leftover space

if [ -n "${download+x}" ]; then
  for package in $flag_pkgs; do
    find_pkg "$package"
    source_template
    prepare_system

    download_stage_1
    download_stage_2
    download_stage_3
  done

  cleanup_success
fi

if [ -n "${remove+x}" ]; then
  for package in $flag_pkgs; do
    find_pkg "$package"
    source_template
    remove_pkg
  done

  cleanup_success
fi

if [ -n "${search+x}" ]; then
  find "$repos_path" -maxdepth 2 -type d -iname "$flag_pkgs*" -exec echo {} \;

  cleanup_success
fi

if [ -n "${update+x}" ]; then
  full_update

  cleanup_success
fi

if [ -n "${update_pkg+x}" ]; then
  update_pkg

  cleanup_success
fi

if [ -n "${check_updates+x}" ]; then
  update_checker

  cleanup_success
fi

if [ -n "${update_self+x}" ]; then
  self_update

  cleanup_success
fi

if [ -n "${redownload+x}" ]; then
  for package in $flag_pkgs; do
    bpm -R "$package" # remove package
    bpm -d "$package" # reinstall package (cannot update bpm)
  done
fi

if [ -n "${list_installed+x}" ]; then
  for package in "$packages_path"*; do
    echo "$(basename "$package")_v$(cat "$package/VERSION")"
  done

  cleanup_success
fi

if [ -n "${list_avliable+x}" ]; then
  for package in "$repos_path"*; do
    path_to_package_template="$package/Template"
    source_template
    echo "$(basename "$package")_v${pkg_version}_${pkg_revision}"
  done

  cleanup_success
fi

print_err "[ERR]: incorrect options supplied"
usage
cleanup
