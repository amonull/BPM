--path        | -p -> put built package on this path instead
--repo        | -r -> use a different db
--show-build  | -s -> print out build information for package
--add         | -a -> add new package to db from template
--reverse     | -r -> build template from information inside db
--sync        | -S -> sync current db with db in git repo
--template    | -t -> allows building and installed packages using template only no need for db (this flag makes making a db optional making sqlite dependecy optional)
--self-update | -U -> updates bpm (and repos)

IMPORTANT: templates are temporarily used and are not required for a user to keep.

KEEPING TRACK OF PKGS:
sqlite db inside installed.db in .local/share/BPM/
has 1 table
installed -> name TEXT NOT NULL, path TEXT NOT NULL, version TEXT NOT NULL, repo TEXT NOT NULL
repo has to have the name in .local/share/BPM/repo/<name> or full path to said repo/template (full path will use file command to see if item is repo or template)
check if repo or template with -> file path | grep -i sqlite && <is repo> || <is template>
OR
have installed boolean not null column in pkgs table and check for installed pkgs with
SELECT name, version FROM pkgs WHERE installed=true

to make sqlite fully optional if sqlite is not found on the system an installed.txt file will be made instead of .db which holds information as
<name>=<version> i.e. bpm=0.1_alpha_1 (last _1 is the revision)

TO TURN OFF sqlite not found using templates only WARNING:
no_sqlite=0 will be turned to no_sqlite=1
using a diff file making 2 different pkgs both with the same name (makes them conflict)
(makes showing using patches and conflicting pkgs better in templates compared to ani-cli)

make file by changing no_sqlite=0 to 1 and use cmd diff sqlite_bpm no_sqlite_bpm > no_sqlite_bpm.patch
add no_sqlite_bpm.patch to bpm_template/patches/
add bpm as conflict to bpm-no-sqlite
add bpm-no-sqlite as conflict to bpm
(IMPORTANT)
the two files don't actually conflict its only there to show how to add it.
